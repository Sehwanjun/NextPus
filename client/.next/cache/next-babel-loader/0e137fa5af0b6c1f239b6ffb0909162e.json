{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(unfollow),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchFollow),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnfollow),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\n// import axios from \"axios\";\nimport { delay, put, all, fork, takeLatest } from \"redux-saga/effects\";\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\"; // saga's generator\n// const gen = function* () {console.log(1); yield; console.log(2); yield 4;}\n// const generator = gen() --> 객체생성,\n// generator.next() --> gen 실행 '1', 재실행 '2'(value: 4, done: true)\n// 중단점이 있는 함수(yield는 멈춤, yield뒤에 값: value)\n// while(true){yield '무한';} : 무한반복이 아니라 매번 중단됨('무한', done:false)\n// function* watchLogin(){yield take('LOG_IN', logIn)}\n// 5. 여긴 generator함수 아님(data를 받아서 data와 함께 api에 넣음 - 바로 실행)!!\n// data는 아래함수의 action.data\n\nfunction logInAPI(data, a, b) {\n  return axios.post(\"/api/login\", data);\n} // 4. logIn 실행\n// 6. loginAPI를 실행시켜서 result로 결과를 받음\n// put: dispatch와 같음(액션객체를 dispatch)\n// call: 동기함수실행\n// call이라 axios.post('api/login).then(()=>{yield put({type: ...})})\n// fork였다면 그냥 axios.post('api/login)와 같음\n// 즉, API에 post한 다음 끝나면 다음것 put실행한다(fork면 명령내리고 받기전에 바로다음것)\n// yield는 await과 비슷한데 fork는 이를 무시하게끔 즉시실행하는 것\n\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n} // 8. 성공 결과는 result.data, 실패 결과는 err.response.data에 담김\n\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS // data: result.data,\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction signUpAPI() {\n  return axios.post(\"/api/signUp\");\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction unfollowAPI() {\n  return axios.post(\"/api/unfollow\");\n}\n\nfunction unfollow(action) {\n  return _regeneratorRuntime.wrap(function unfollow$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: UNFOLLOW_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context4.next = 12;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 12;\n          return put({\n            type: UNFOLLOW_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n} // 9. yield, take 단점: 딱 한번밖에 안받음(일회용) 한번쓰면 사라져버림(따라서 while로 감싸야)\n// while, take는 동기적으로 동작, takeEvery는 비동기로 동작\n// 직관적이지 않고 보기에 그래서 while대신 takeEvery로 동작\n// takeLatest: ex. 실수로 로그인버튼 클릭두번 따닥시 takeevery는 둘다실행하기에 대체\n// 첫번째것만 하고싶으면 takeLeading\n// but, 응답을 한개 취소하는거지 요청을 취소하지는 않음 (요청 2개감)\n// 이를 해결하기 위한 throttle, 3000(3초내에 딱 한번만 실행)\n// throttle 잘 안쓰고 보통 takelatest하고 서버에서 요청을 검토해보고 막도록 함\n// 10. 서버구현 아직 안해서 call logInAPI 다 에러날 것이라 delay로 임시대체\n// 3. take: LOG_IN액션이 실행될때까지 기다리겠다. 그리고 logIn실행\n//    logIn관련된 매개변수(data)가 logIn()함수의 action에 전달\n//    action.type: LOG_IN_REQUEST, actin.data: login data 포함\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchFollow() {\n  return _regeneratorRuntime.wrap(function watchFollow$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(FOLLOW_REQUEST, follow);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchUnfollow() {\n  return _regeneratorRuntime.wrap(function watchUnfollow$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(UNFOLLOW_REQUEST, unfollow);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n} // 1. all: 배열 내의 것들을 동시실행(배열을 받음)\n// 2. fork, call: 함수실행 명령어(fork와 call의 차이점 존재함)\n// fork: 비동기함수호출(기다리지않고 바로 다음것 실행), call: 동기함수호출(기다린후 실행)\n// # call, yield등을 쓰는 이유: test할 때 편함(a.next()함수실행으로 하나씩 버그검사, test코드 짜둬야 함)\n\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/sagas/user.js"],"names":["logIn","logOut","signUp","unfollow","watchLogIn","watchLogOut","watchSignUp","watchFollow","watchUnfollow","userSaga","delay","put","all","fork","takeLatest","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","a","b","axios","post","action","type","error","response","logOutAPI","signUpAPI","console","unfollowAPI","follow"],"mappings":"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","sourcesContent":["// import axios from \"axios\";\r\nimport { delay, put, all, fork, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  FOLLOW_FAILURE,\r\n  FOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n  UNFOLLOW_REQUEST,\r\n  UNFOLLOW_SUCCESS,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n} from \"../reducers/user\";\r\n// saga's generator\r\n// const gen = function* () {console.log(1); yield; console.log(2); yield 4;}\r\n// const generator = gen() --> 객체생성,\r\n// generator.next() --> gen 실행 '1', 재실행 '2'(value: 4, done: true)\r\n// 중단점이 있는 함수(yield는 멈춤, yield뒤에 값: value)\r\n// while(true){yield '무한';} : 무한반복이 아니라 매번 중단됨('무한', done:false)\r\n// function* watchLogin(){yield take('LOG_IN', logIn)}\r\n\r\n// 5. 여긴 generator함수 아님(data를 받아서 data와 함께 api에 넣음 - 바로 실행)!!\r\n// data는 아래함수의 action.data\r\nfunction logInAPI(data, a, b) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\n// 4. logIn 실행\r\n// 6. loginAPI를 실행시켜서 result로 결과를 받음\r\n// put: dispatch와 같음(액션객체를 dispatch)\r\n// call: 동기함수실행\r\n// call이라 axios.post('api/login).then(()=>{yield put({type: ...})})\r\n// fork였다면 그냥 axios.post('api/login)와 같음\r\n// 즉, API에 post한 다음 끝나면 다음것 put실행한다(fork면 명령내리고 받기전에 바로다음것)\r\n// yield는 await과 비슷한데 fork는 이를 무시하게끔 즉시실행하는 것\r\nfunction* logIn(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // loginAPI(action.data)과 같은뜻: 함수호출 방식이 call은 이렇게\r\n    // 첫번째자리가 함수, 그다음자리부터 매개변수(인수)\r\n    // 즉, action에서 data꺼내서 API함수에 전달\r\n    // 임시보류 const result = yield call(logInAPI, action.data, \"a\", \"b\");\r\n    // 임시보류 yield put({ type: \"LOG_IN_SUCCESS\", data: result.data });\r\n    // loginRequest에서 받은 것 바로 success로 보내버림(임시방편)\r\n    yield put({ type: LOG_IN_SUCCESS, data: action.data });\r\n  } catch (err) {\r\n    // 7. 요청이 실패할 경우를 위해\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n// 8. 성공 결과는 result.data, 실패 결과는 err.response.data에 담김\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    // 임시보류 const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI() {\r\n  return axios.post(\"/api/signUp\");\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    // const result = yield call(signUpAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n  return axios.post(\"/api/unfollow\");\r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    // const result = yield call(unfollowAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// 9. yield, take 단점: 딱 한번밖에 안받음(일회용) 한번쓰면 사라져버림(따라서 while로 감싸야)\r\n// while, take는 동기적으로 동작, takeEvery는 비동기로 동작\r\n// 직관적이지 않고 보기에 그래서 while대신 takeEvery로 동작\r\n// takeLatest: ex. 실수로 로그인버튼 클릭두번 따닥시 takeevery는 둘다실행하기에 대체\r\n// 첫번째것만 하고싶으면 takeLeading\r\n// but, 응답을 한개 취소하는거지 요청을 취소하지는 않음 (요청 2개감)\r\n// 이를 해결하기 위한 throttle, 3000(3초내에 딱 한번만 실행)\r\n// throttle 잘 안쓰고 보통 takelatest하고 서버에서 요청을 검토해보고 막도록 함\r\n// 10. 서버구현 아직 안해서 call logInAPI 다 에러날 것이라 delay로 임시대체\r\n\r\n// 3. take: LOG_IN액션이 실행될때까지 기다리겠다. 그리고 logIn실행\r\n//    logIn관련된 매개변수(data)가 logIn()함수의 action에 전달\r\n//    action.type: LOG_IN_REQUEST, actin.data: login data 포함\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\n// 1. all: 배열 내의 것들을 동시실행(배열을 받음)\r\n// 2. fork, call: 함수실행 명령어(fork와 call의 차이점 존재함)\r\n// fork: 비동기함수호출(기다리지않고 바로 다음것 실행), call: 동기함수호출(기다린후 실행)\r\n// # call, yield등을 쓰는 이유: test할 때 편함(a.next()함수실행으로 하나씩 버그검사, test코드 짜둬야 함)\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}