{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport shortId from \"shortid\"; // 대소문자 구분: DB 시퀄라이즈 해당 정보와 다른정보가 합쳐질 경우 대문자로 나옴\n// id, content는 post 자체의 속성\n// imagePaths: 이미지 업로드시 이미지 경로저장\n// postAdded: 게시글 추가가 완료되었을 때 true\n// id: 컴포넌트에 map함수를 통해 post별로 순서부여할때 등 사용\n// 댓글구조: mainPosts에서 id를 찾아서 해당되는 게시물의 Comments로 접근\n\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"전세환\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프래스,\",\n    Images: [{\n      src: \"https://newsimg.hankookilbo.com/cms/articlerelease/2020/04/21/202004211422083541_3.jpg\"\n    }, {\n      src: \"https://wonderfulmind.co.kr/wp-content/uploads/2018/10/man-on-top-of-books-e1538933803436.jpg\"\n    }, {\n      src: \"http://tcpschool.com/lectures/img_deeplearning_07_reinforcement.png\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nemes\"\n      },\n      content: \"우와 개정판이 나왔네요~\"\n    }, {\n      User: {\n        nickname: \"hemes\"\n      },\n      content: \"좋네욬ㅋㅋ\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: shortId.generate(),\n    // id가 겹치지 않도록 만들어주는 library\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"전세환\"\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // dummyPost 앞에다 추가해서 게시글 맨 위에 올리게끔\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommenttDone: false,\n        addCommentError: null\n      });\n    // 1. case문 내에선 {}블록씌워야 함\n    // 불변성을 지키기 위한 노력\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [dummyComment(action.data.content)].concat(_toConsumableArray(post.Comments));\n\n        var mainPosts = _toConsumableArray(state.mainPosts);\n\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","generate","dummyComment","reducer","state","action","error","addCommenttDone","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\r\n\r\n// 대소문자 구분: DB 시퀄라이즈 해당 정보와 다른정보가 합쳐질 경우 대문자로 나옴\r\n// id, content는 post 자체의 속성\r\n// imagePaths: 이미지 업로드시 이미지 경로저장\r\n// postAdded: 게시글 추가가 완료되었을 때 true\r\n// id: 컴포넌트에 map함수를 통해 post별로 순서부여할때 등 사용\r\n\r\n// 댓글구조: mainPosts에서 id를 찾아서 해당되는 게시물의 Comments로 접근\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"전세환\",\r\n      },\r\n      content: \"첫 번째 게시글 #해시태그 #익스프래스,\",\r\n      Images: [\r\n        {\r\n          src:\r\n            \"https://newsimg.hankookilbo.com/cms/articlerelease/2020/04/21/202004211422083541_3.jpg\",\r\n        },\r\n        {\r\n          src:\r\n            \"https://wonderfulmind.co.kr/wp-content/uploads/2018/10/man-on-top-of-books-e1538933803436.jpg\",\r\n        },\r\n        {\r\n          src:\r\n            \"http://tcpschool.com/lectures/img_deeplearning_07_reinforcement.png\",\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            nickname: \"nemes\",\r\n          },\r\n          content: \"우와 개정판이 나왔네요~\",\r\n        },\r\n        {\r\n          User: {\r\n            nickname: \"hemes\",\r\n          },\r\n          content: \"좋네욬ㅋㅋ\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = data => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = data => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = data => ({\r\n  id: shortId.generate(), // id가 겹치지 않도록 만들어주는 library\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로초\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = data => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"전세환\",\r\n  },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        addPostLoading: true,\r\n        addPostDone: false,\r\n        addPostError: null,\r\n      };\r\n    case ADD_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        // dummyPost 앞에다 추가해서 게시글 맨 위에 올리게끔\r\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n        addPostLoading: false,\r\n        addPostDone: true,\r\n      };\r\n    case ADD_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        addPostLoading: false,\r\n        addPostError: action.error,\r\n      };\r\n    case ADD_COMMENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: true,\r\n        addCommenttDone: false,\r\n        addCommentError: null,\r\n      };\r\n\r\n    // 1. case문 내에선 {}블록씌워야 함\r\n    // 불변성을 지키기 위한 노력\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const postIndex = state.mainPosts.findIndex(\r\n        v => v.id === action.data.postId\r\n      );\r\n      const post = { ...state.mainPosts[postIndex] };\r\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = post;\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n        addCommentLoading: false,\r\n        addCommentDone: true,\r\n      };\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentError: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}