{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\arthu\\\\Documents\\\\nextpus_2020\\\\client\\\\components\\\\PostCard.js\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\n\nvar PostCard = function PostCard() {\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }, __jsx(Image, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }), __jsx(Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }), __jsx(Buttons, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  })), __jsx(CommentForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }), __jsx(Comments, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c = PostCard;\nexport default PostCard; // import React, { useState, useCallback } from \"react\";\n// import PropTPostCardypes from \"prop-types\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\n// import {\n//   RetweetOutlined,\n//   HeartOutlined,\n//   MessageOutlined,\n//   EllipsisOutlined,\n//   HeartTwoTone,\n// } from \"@ant-design/icons\";\n// import Link from \"next/link\";\n// import moment from \"moment\";\n// import PostImages from \"./PostImages\";\n// import CommentForm from \"./CommentForm\";\n// import PostCardContent from \"./PostCardContent\";\n// import {\n//   LIKE_POST_REQUEST,\n//   REMOVE_POST_REQUEST,\n//   UNLIKE_POST_REQUEST,\n//   RETWEET_REQUEST,\n//   UPDATE_POST_REQUEST,\n// } from \"../reducers/post\";\n// import FollowButton from \"./FollowButton\";\n// moment.locale(\"ko\");\n// const PostCard = ({ post }) => {\n//   const dispatch = useDispatch();\n//   const { removePostLoading } = useSelector(state => state.post);\n//   const [commentFormOpened, setCommentFormOpened] = useState(false);\n//   const id = useSelector(state => state.user.me?.id);\n//   const [editMode, setEditMode] = useState(false);\n//   const onClickUpdate = useCallback(() => {\n//     setEditMode(true);\n//   }, []);\n//   const onCancelUpdate = useCallback(() => {\n//     setEditMode(false);\n//   }, []);\n//   const onChangePost = useCallback(\n//     editText => () => {\n//       dispatch({\n//         type: UPDATE_POST_REQUEST,\n//         data: {\n//           PostId: post.id,\n//           content: editText,\n//         },\n//       });\n//     },\n//     [post]\n//   );\n//   const onLike = useCallback(() => {\n//     if (!id) {\n//       return alert(\"로그인이 필요합니다.\");\n//     }\n//     return dispatch({\n//       type: LIKE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, [id]);\n//   const onUnlike = useCallback(() => {\n//     if (!id) {\n//       return alert(\"로그인이 필요합니다.\");\n//     }\n//     return dispatch({\n//       type: UNLIKE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, [id]);\n//   const onToggleComment = useCallback(() => {\n//     setCommentFormOpened(prev => !prev);\n//   }, []);\n//   const onRemovePost = useCallback(() => {\n//     if (!id) {\n//       return alert(\"로그인이 필요합니다.\");\n//     }\n//     return dispatch({\n//       type: REMOVE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, [id]);\n//   const onRetweet = useCallback(() => {\n//     if (!id) {\n//       return alert(\"로그인이 필요합니다.\");\n//     }\n//     return dispatch({\n//       type: RETWEET_REQUEST,\n//       data: post.id,\n//     });\n//   }, [id]);\n//   const liked = post.Likers.find(v => v.id === id);\n//   return (\n//     <div style={{ marginBottom: 20 }}>\n//       <Card\n//         cover={post.Images[0] && <PostImages images={post.Images} />}\n//         actions={[\n//           <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\n//           liked ? (\n//             <HeartTwoTone\n//               twoToneColor=\"#eb2f96\"\n//               key=\"heart\"\n//               onClick={onUnlike}\n//             />\n//           ) : (\n//             <HeartOutlined key=\"heart\" onClick={onLike} />\n//           ),\n//           <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n//           <Popover\n//             key=\"more\"\n//             content={\n//               <Button.Group>\n//                 {id && post.User.id === id ? (\n//                   <>\n//                     {!post.RetweetId && (\n//                       <Button onClick={onClickUpdate}>수정</Button>\n//                     )}\n//                     <Button\n//                       type=\"danger\"\n//                       loading={removePostLoading}\n//                       onClick={onRemovePost}\n//                     >\n//                       삭제\n//                     </Button>\n//                   </>\n//                 ) : (\n//                   <Button>신고</Button>\n//                 )}\n//               </Button.Group>\n//             }\n//           >\n//             <EllipsisOutlined />\n//           </Popover>,\n//         ]}\n//         title={\n//           post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null\n//         }\n//         extra={id && <FollowButton post={post} />}\n//       >\n//         {post.RetweetId && post.Retweet ? (\n//           <Card\n//             cover={\n//               post.Retweet.Images[0] && (\n//                 <PostImages images={post.Retweet.Images} />\n//               )\n//             }\n//           >\n//             <div style={{ float: \"right\" }}>\n//               {moment(post.createdAt).format(\"YYYY.MM.DD\")}\n//             </div>\n//             <Card.Meta\n//               avatar={\n//                 <Link href={`/user/${post.Retweet.User.id}`} prefetch={false}>\n//                   <a>\n//                     <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\n//                   </a>\n//                 </Link>\n//               }\n//               title={post.Retweet.User.nickname}\n//               description={\n//                 <PostCardContent\n//                   postData={post.Retweet.content}\n//                   onChangePost={onChangePost}\n//                   onCancelUpdate={onCancelUpdate}\n//                 />\n//               }\n//             />\n//           </Card>\n//         ) : (\n//           <>\n//             <div style={{ float: \"right\" }}>\n//               {moment(post.createdAt).format(\"YYYY.MM.DD\")}\n//             </div>\n//             <Card.Meta\n//               avatar={\n//                 <Link href={`/user/${post.User.id}`} prefetch={false}>\n//                   <a>\n//                     <Avatar>{post.User.nickname[0]}</Avatar>\n//                   </a>\n//                 </Link>\n//               }\n//               title={post.User.nickname}\n//               description={\n//                 <PostCardContent\n//                   editMode={editMode}\n//                   onChangePost={onChangePost}\n//                   onCancelUpdate={onCancelUpdate}\n//                   postData={post.content}\n//                 />\n//               }\n//             />\n//           </>\n//         )}\n//       </Card>\n//       {commentFormOpened && (\n//         <div>\n//           <CommentForm post={post} />\n//           <List\n//             header={`${post.Comments.length}개의 댓글`}\n//             itemLayout=\"horizontal\"\n//             dataSource={post.Comments}\n//             renderItem={item => (\n//               <li>\n//                 <Comment\n//                   author={item.User.nickname}\n//                   avatar={\n//                     <Link href={`/user/${item.User.id}`} prefetch={false}>\n//                       <a>\n//                         <Avatar>{item.User.nickname[0]}</Avatar>\n//                       </a>\n//                     </Link>\n//                   }\n//                   content={item.content}\n//                 />\n//               </li>\n//             )}\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// PostCard.propTypes = {\n//   post: PropTypes.shape({\n//     id: PropTypes.number,\n//     User: PropTypes.object,\n//     content: PropTypes.string,\n//     createdAt: PropTypes.string,\n//     Comments: PropTypes.arrayOf(PropTypes.object),\n//     Images: PropTypes.arrayOf(PropTypes.object),\n//     Likers: PropTypes.arrayOf(PropTypes.object),\n//     RetweetId: PropTypes.number,\n//     Retweet: PropTypes.objectOf(PropTypes.any),\n//   }).isRequired,\n// };\n// export default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/components/PostCard.js"],"names":["React","PostCard"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,EAME,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAYD,CAbD;;KAAMA,Q;AAeN,eAAeA,QAAfsourcesContent":["import React from 'react';\r\n\r\n\r\nconst PostCard = () => {\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Image />\r\n        <Content />\r\n        <Buttons></Buttons>\r\n      </Card>\r\n      <CommentForm />\r\n      <Comments />\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n\r\n\r\n// import React, { useState, useCallback } from \"react\";\r\n// import PropTPostCardypes from \"prop-types\";\r\n// import { useSelector, useDispatch } from \"react-redux\";\r\n// import { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\r\n// import {\r\n//   RetweetOutlined,\r\n//   HeartOutlined,\r\n//   MessageOutlined,\r\n//   EllipsisOutlined,\r\n//   HeartTwoTone,\r\n// } from \"@ant-design/icons\";\r\n// import Link from \"next/link\";\r\n// import moment from \"moment\";\r\n\r\n// import PostImages from \"./PostImages\";\r\n// import CommentForm from \"./CommentForm\";\r\n// import PostCardContent from \"./PostCardContent\";\r\n// import {\r\n//   LIKE_POST_REQUEST,\r\n//   REMOVE_POST_REQUEST,\r\n//   UNLIKE_POST_REQUEST,\r\n//   RETWEET_REQUEST,\r\n//   UPDATE_POST_REQUEST,\r\n// } from \"../reducers/post\";\r\n// import FollowButton from \"./FollowButton\";\r\n\r\n// moment.locale(\"ko\");\r\n\r\n// const PostCard = ({ post }) => {\r\n//   const dispatch = useDispatch();\r\n//   const { removePostLoading } = useSelector(state => state.post);\r\n//   const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n//   const id = useSelector(state => state.user.me?.id);\r\n//   const [editMode, setEditMode] = useState(false);\r\n\r\n//   const onClickUpdate = useCallback(() => {\r\n//     setEditMode(true);\r\n//   }, []);\r\n\r\n//   const onCancelUpdate = useCallback(() => {\r\n//     setEditMode(false);\r\n//   }, []);\r\n\r\n//   const onChangePost = useCallback(\r\n//     editText => () => {\r\n//       dispatch({\r\n//         type: UPDATE_POST_REQUEST,\r\n//         data: {\r\n//           PostId: post.id,\r\n//           content: editText,\r\n//         },\r\n//       });\r\n//     },\r\n//     [post]\r\n//   );\r\n\r\n//   const onLike = useCallback(() => {\r\n//     if (!id) {\r\n//       return alert(\"로그인이 필요합니다.\");\r\n//     }\r\n//     return dispatch({\r\n//       type: LIKE_POST_REQUEST,\r\n//       data: post.id,\r\n//     });\r\n//   }, [id]);\r\n//   const onUnlike = useCallback(() => {\r\n//     if (!id) {\r\n//       return alert(\"로그인이 필요합니다.\");\r\n//     }\r\n//     return dispatch({\r\n//       type: UNLIKE_POST_REQUEST,\r\n//       data: post.id,\r\n//     });\r\n//   }, [id]);\r\n//   const onToggleComment = useCallback(() => {\r\n//     setCommentFormOpened(prev => !prev);\r\n//   }, []);\r\n\r\n//   const onRemovePost = useCallback(() => {\r\n//     if (!id) {\r\n//       return alert(\"로그인이 필요합니다.\");\r\n//     }\r\n//     return dispatch({\r\n//       type: REMOVE_POST_REQUEST,\r\n//       data: post.id,\r\n//     });\r\n//   }, [id]);\r\n\r\n//   const onRetweet = useCallback(() => {\r\n//     if (!id) {\r\n//       return alert(\"로그인이 필요합니다.\");\r\n//     }\r\n//     return dispatch({\r\n//       type: RETWEET_REQUEST,\r\n//       data: post.id,\r\n//     });\r\n//   }, [id]);\r\n\r\n//   const liked = post.Likers.find(v => v.id === id);\r\n//   return (\r\n//     <div style={{ marginBottom: 20 }}>\r\n//       <Card\r\n//         cover={post.Images[0] && <PostImages images={post.Images} />}\r\n//         actions={[\r\n//           <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n//           liked ? (\r\n//             <HeartTwoTone\r\n//               twoToneColor=\"#eb2f96\"\r\n//               key=\"heart\"\r\n//               onClick={onUnlike}\r\n//             />\r\n//           ) : (\r\n//             <HeartOutlined key=\"heart\" onClick={onLike} />\r\n//           ),\r\n//           <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n//           <Popover\r\n//             key=\"more\"\r\n//             content={\r\n//               <Button.Group>\r\n//                 {id && post.User.id === id ? (\r\n//                   <>\r\n//                     {!post.RetweetId && (\r\n//                       <Button onClick={onClickUpdate}>수정</Button>\r\n//                     )}\r\n//                     <Button\r\n//                       type=\"danger\"\r\n//                       loading={removePostLoading}\r\n//                       onClick={onRemovePost}\r\n//                     >\r\n//                       삭제\r\n//                     </Button>\r\n//                   </>\r\n//                 ) : (\r\n//                   <Button>신고</Button>\r\n//                 )}\r\n//               </Button.Group>\r\n//             }\r\n//           >\r\n//             <EllipsisOutlined />\r\n//           </Popover>,\r\n//         ]}\r\n//         title={\r\n//           post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null\r\n//         }\r\n//         extra={id && <FollowButton post={post} />}\r\n//       >\r\n//         {post.RetweetId && post.Retweet ? (\r\n//           <Card\r\n//             cover={\r\n//               post.Retweet.Images[0] && (\r\n//                 <PostImages images={post.Retweet.Images} />\r\n//               )\r\n//             }\r\n//           >\r\n//             <div style={{ float: \"right\" }}>\r\n//               {moment(post.createdAt).format(\"YYYY.MM.DD\")}\r\n//             </div>\r\n//             <Card.Meta\r\n//               avatar={\r\n//                 <Link href={`/user/${post.Retweet.User.id}`} prefetch={false}>\r\n//                   <a>\r\n//                     <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\r\n//                   </a>\r\n//                 </Link>\r\n//               }\r\n//               title={post.Retweet.User.nickname}\r\n//               description={\r\n//                 <PostCardContent\r\n//                   postData={post.Retweet.content}\r\n//                   onChangePost={onChangePost}\r\n//                   onCancelUpdate={onCancelUpdate}\r\n//                 />\r\n//               }\r\n//             />\r\n//           </Card>\r\n//         ) : (\r\n//           <>\r\n//             <div style={{ float: \"right\" }}>\r\n//               {moment(post.createdAt).format(\"YYYY.MM.DD\")}\r\n//             </div>\r\n//             <Card.Meta\r\n//               avatar={\r\n//                 <Link href={`/user/${post.User.id}`} prefetch={false}>\r\n//                   <a>\r\n//                     <Avatar>{post.User.nickname[0]}</Avatar>\r\n//                   </a>\r\n//                 </Link>\r\n//               }\r\n//               title={post.User.nickname}\r\n//               description={\r\n//                 <PostCardContent\r\n//                   editMode={editMode}\r\n//                   onChangePost={onChangePost}\r\n//                   onCancelUpdate={onCancelUpdate}\r\n//                   postData={post.content}\r\n//                 />\r\n//               }\r\n//             />\r\n//           </>\r\n//         )}\r\n//       </Card>\r\n//       {commentFormOpened && (\r\n//         <div>\r\n//           <CommentForm post={post} />\r\n//           <List\r\n//             header={`${post.Comments.length}개의 댓글`}\r\n//             itemLayout=\"horizontal\"\r\n//             dataSource={post.Comments}\r\n//             renderItem={item => (\r\n//               <li>\r\n//                 <Comment\r\n//                   author={item.User.nickname}\r\n//                   avatar={\r\n//                     <Link href={`/user/${item.User.id}`} prefetch={false}>\r\n//                       <a>\r\n//                         <Avatar>{item.User.nickname[0]}</Avatar>\r\n//                       </a>\r\n//                     </Link>\r\n//                   }\r\n//                   content={item.content}\r\n//                 />\r\n//               </li>\r\n//             )}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// PostCard.propTypes = {\r\n//   post: PropTypes.shape({\r\n//     id: PropTypes.number,\r\n//     User: PropTypes.object,\r\n//     content: PropTypes.string,\r\n//     createdAt: PropTypes.string,\r\n//     Comments: PropTypes.arrayOf(PropTypes.object),\r\n//     Images: PropTypes.arrayOf(PropTypes.object),\r\n//     Likers: PropTypes.arrayOf(PropTypes.object),\r\n//     RetweetId: PropTypes.number,\r\n//     Retweet: PropTypes.objectOf(PropTypes.any),\r\n//   }).isRequired,\r\n// };\r\n\r\n// export default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}