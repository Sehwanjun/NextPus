{"ast":null,"code":"// import axios from \"axios\";\nimport { delay, put, all, fork, takeLatest, throttle } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; // function loadPostsAPI(data) {\n//   return axios.get(\"/api/posts\", data);\n// }\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n} // function addPostAPI(data) {\n//   return axios.post(\"/api/post\", data);\n// }\n\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); // 임시보류 const result = yield call(addPostAPI, action.data);\n    // id를 생성해서 post와 user리덕스 연결고리\n    // 어떤 액션이 여러 리듀서의 데이터를 동시에(user, post)바꿔야한다면 여러 액션을 호출해주면 됨\n\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      } // 포스팅에 글 입력한 내용\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} // function removePostAPI(data) {\n//   return axios.delete(\"/api/post\", data);\n// }\n\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000); // POST 리듀서 상태 변경\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // USER 리듀서 상태 변경\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} // function addCommentAPI(data) {\n//   return axios.post(`/api/post/${data.postId}/comment`, data);\n// }\n\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data // CommentForm에서 onSubmitComment로부터 불러들임\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(3000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/sagas/post.js"],"names":["delay","put","all","fork","takeLatest","throttle","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPosts","action","type","data","err","console","error","response","addPost","id","generate","content","removePost","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["// import axios from \"axios\";\r\nimport {\r\n  delay,\r\n  put,\r\n  all,\r\n  fork,\r\n  takeLatest,\r\n  throttle,\r\n} from \"redux-saga/effects\";\r\nimport shortId from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  generateDummyPost,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\n// function loadPostsAPI(data) {\r\n//   return axios.get(\"/api/posts\", data);\r\n// }\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    // const result = yield call(loadPostsAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addPostAPI(data) {\r\n//   return axios.post(\"/api/post\", data);\r\n// }\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // 임시보류 const result = yield call(addPostAPI, action.data);\r\n    // id를 생성해서 post와 user리덕스 연결고리\r\n    // 어떤 액션이 여러 리듀서의 데이터를 동시에(user, post)바꿔야한다면 여러 액션을 호출해주면 됨\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      }, // 포스팅에 글 입력한 내용\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function removePostAPI(data) {\r\n//   return axios.delete(\"/api/post\", data);\r\n// }\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    // POST 리듀서 상태 변경\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    // USER 리듀서 상태 변경\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addCommentAPI(data) {\r\n//   return axios.post(`/api/post/${data.postId}/comment`, data);\r\n// }\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data, // CommentForm에서 onSubmitComment로부터 불러들임\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(3000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}