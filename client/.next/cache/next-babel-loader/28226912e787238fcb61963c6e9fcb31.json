{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// 대소문자 구분: DB 시퀄라이즈 해당 정보와 다른정보가 합쳐질 경우 대문자로 나옴\n// id, content는 post 자체의 속성\n// imagePaths: 이미지 업로드시 이미지 경로저장\n// postAdded: 게시글 추가가 완료되었을 때 true\n// id: 컴포넌트에 map함수를 통해 post별로 순서부여할때 등 사용\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"전세환\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프래스,\",\n    Images: [{\n      src: \"https://newsimg.hankookilbo.com/cms/articlerelease/2020/04/21/202004211422083541_3.jpg\"\n    }, {\n      src: \"https://wonderfulmind.co.kr/wp-content/uploads/2018/10/man-on-top-of-books-e1538933803436.jpg\"\n    }, {\n      src: \"http://tcpschool.com/lectures/img_deeplearning_07_reinforcement.png\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nemes\"\n      },\n      content: \"우와 개정판이 나왔네요~\"\n    }, {\n      User: {\n        nickname: \"hemes\"\n      },\n      content: \"좋네욬ㅋㅋ\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n};\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nexport const dummyPost = {\n  id: 2,\n  content: \"더미데이터입니다.\",\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // dummyPost 앞에다 추가해서 게시글 맨 위에 올리게끔\n        mainPosts: [dummyPost, ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommenttDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","reducer","state","action","error","addCommentLoading","addCommenttDone","addCommentError","addCommentDone"],"mappings":"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","sourcesContent":["// 대소문자 구분: DB 시퀄라이즈 해당 정보와 다른정보가 합쳐질 경우 대문자로 나옴\r\n// id, content는 post 자체의 속성\r\n// imagePaths: 이미지 업로드시 이미지 경로저장\r\n// postAdded: 게시글 추가가 완료되었을 때 true\r\n// id: 컴포넌트에 map함수를 통해 post별로 순서부여할때 등 사용\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"전세환\",\r\n      },\r\n      content: \"첫 번째 게시글 #해시태그 #익스프래스,\",\r\n      Images: [\r\n        {\r\n          src:\r\n            \"https://newsimg.hankookilbo.com/cms/articlerelease/2020/04/21/202004211422083541_3.jpg\",\r\n        },\r\n        {\r\n          src:\r\n            \"https://wonderfulmind.co.kr/wp-content/uploads/2018/10/man-on-top-of-books-e1538933803436.jpg\",\r\n        },\r\n        {\r\n          src:\r\n            \"http://tcpschool.com/lectures/img_deeplearning_07_reinforcement.png\",\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            nickname: \"nemes\",\r\n          },\r\n          content: \"우와 개정판이 나왔네요~\",\r\n        },\r\n        {\r\n          User: {\r\n            nickname: \"hemes\",\r\n          },\r\n          content: \"좋네욬ㅋㅋ\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n};\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = data => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = data => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const dummyPost = {\r\n  id: 2,\r\n  content: \"더미데이터입니다.\",\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로초\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        addPostLoading: true,\r\n        addPostDone: false,\r\n        addPostError: null,\r\n      };\r\n    case ADD_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        // dummyPost 앞에다 추가해서 게시글 맨 위에 올리게끔\r\n        mainPosts: [dummyPost, ...state.mainPosts],\r\n        addPostLoading: false,\r\n        addPostDone: true,\r\n      };\r\n    case ADD_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        addPostLoading: false,\r\n        addPostError: action.error,\r\n      };\r\n    case ADD_COMMENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: true,\r\n        addCommenttDone: false,\r\n        addCommentError: null,\r\n      };\r\n    case ADD_COMMENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentDone: true,\r\n      };\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentError: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}