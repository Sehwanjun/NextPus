{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\arthu\\\\Documents\\\\nextpus_2020\\\\client\\\\components\\\\CommentForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useInput from \"../hooks/useinput\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var _useInput = useInput(\"\"),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2]; // 이것도 댓글 초기화시키는 건데 서버에 보낸게 완료된 뒤\n  // 초기화시키기 위해 useEffect사용\n\n\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText(\"\");\n    }\n  }, [addCommentDone]);\n  var onSubmitComment = useCallback(function () {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText, id]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(Form.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentText,\n    onChange: onChangeCommentText,\n    row: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    style: {\n      position: \"absolute\",\n      margin: 0,\n      bottom: -40,\n      zIndex: 1\n    },\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: addCommentLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"\\uC791\\uC131\")));\n};\n\n_s(CommentForm, \"TkQ1pkz5HHxeoLHkjeNQHPXXfhA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useInput];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/components/CommentForm.js"],"names":["React","useCallback","useEffect","Form","Input","Button","PropTypes","useDispatch","useSelector","useInput","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","id","state","user","me","addCommentDone","addCommentLoading","commentText","onChangeCommentText","setCommentText","onSubmitComment","type","data","content","postId","userId","position","margin","bottom","zIndex","propTypes","object","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAChC,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,MAAMO,EAAE,GAAGN,WAAW,CAAC,UAAAO,KAAK;AAAA;;AAAA,6BAAIA,KAAK,CAACC,IAAN,CAAWC,EAAf,mDAAI,eAAeH,EAAnB;AAAA,GAAN,CAAtB;;AAFgC,qBAGcN,WAAW,CACvD,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACH,IAAV;AAAA,GADkD,CAHzB;AAAA,MAGxBM,cAHwB,gBAGxBA,cAHwB;AAAA,MAGRC,iBAHQ,gBAGRA,iBAHQ;;AAAA,kBAM2BV,QAAQ,CAAC,EAAD,CANnC;AAAA;AAAA,MAMzBW,WANyB;AAAA,MAMZC,mBANY;AAAA,MAMSC,cANT,kBAQhC;AACA;;;AACApB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIgB,cAAJ,EAAoB;AAClBI,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACJ,cAAD,CAJM,CAAT;AAMA,MAAMK,eAAe,GAAGtB,WAAW,CAAC,YAAM;AACxCY,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEd,mBADC;AAEPe,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAEN,WAAX;AAAwBO,QAAAA,MAAM,EAAEf,IAAI,CAACE,EAArC;AAAyCc,QAAAA,MAAM,EAAEd;AAAjD;AAFC,KAAD,CAAR;AAID,GALkC,EAKhC,CAACM,WAAD,EAAcN,EAAd,CALgC,CAAnC;AAOA,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAES,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,KAAK,EAAEH,WADT;AAEE,IAAA,QAAQ,EAAEC,mBAFZ;AAGE,IAAA,GAAG,EAAE,CAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,MAAC,MAAD;AACE,IAAA,KAAK,EAAE;AAAEQ,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,MAAM,EAAE,CAAhC;AAAmCC,MAAAA,MAAM,EAAE,CAAC,EAA5C;AAAgDC,MAAAA,MAAM,EAAE;AAAxD,KADT;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,QAAQ,EAAC,QAHX;AAIE,IAAA,OAAO,EAAGb,iBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,CADF,CADF;AAmBD,CA1CD;;GAAMR,W;UACaJ,W,EACNC,W,EACmCA,W,EAGaC,Q;;;KANvDE,W;AA4CNA,WAAW,CAACsB,SAAZ,GAAwB;AACtBrB,EAAAA,IAAI,EAAEN,SAAS,CAAC4B,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAexB,WAAf","sourcesContent":["import React, { useCallback, useEffect } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport useInput from \"../hooks/useinput\";\r\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\r\n\r\nconst CommentForm = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const id = useSelector(state => state.user.me?.id);\r\n  const { addCommentDone, addCommentLoading } = useSelector(\r\n    state => state.post\r\n  );\r\n  const [commentText, onChangeCommentText, setCommentText] = useInput(\"\");\r\n\r\n  // 이것도 댓글 초기화시키는 건데 서버에 보낸게 완료된 뒤\r\n  // 초기화시키기 위해 useEffect사용\r\n  useEffect(() => {\r\n    if (addCommentDone) {\r\n      setCommentText(\"\");\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: { content: commentText, postId: post.id, userId: id },\r\n    });\r\n  }, [commentText, id]);\r\n\r\n  return (\r\n    <Form onFinish={onSubmitComment}>\r\n      <Form.Item>\r\n        <Input.TextArea\r\n          value={commentText}\r\n          onChange={onChangeCommentText}\r\n          row={4}\r\n        />\r\n        <Button\r\n          style={{ position: \"absolute\", margin: 0, bottom: -40, zIndex: 1 }}\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          loading= {addCommentLoading}\r\n        >\r\n          작성\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}