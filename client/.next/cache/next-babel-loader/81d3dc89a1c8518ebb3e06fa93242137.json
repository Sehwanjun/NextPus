{"ast":null,"code":"import axios from \"axios\";\nimport { delay, put, all, fork, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\"; // saga's generator\n// const gen = function* () {console.log(1); yield; console.log(2); yield 4;}\n// const generator = gen() --> 객체생성,\n// generator.next() --> gen 실행 '1', 재실행 '2'(value: 4, done: true)\n// 중단점이 있는 함수(yield는 멈춤, yield뒤에 값: value)\n// while(true){yield '무한';} : 무한반복이 아니라 매번 중단됨('무한', done:false)\n// function* watchLogin(){yield take('LOG_IN', logIn)}\n// 5. 여긴 generator함수 아님(data를 받아서 data와 함께 api에 넣음 - 바로 실행)!!\n// data는 아래함수의 action.data\n\nfunction logInAPI(data, a, b) {\n  return axios.post(\"/api/login\", data);\n} // 4. logIn 실행\n// 6. loginAPI를 실행시켜서 result로 결과를 받음\n// put: dispatch와 같음(액션객체를 dispatch)\n// call: 동기함수실행\n// call이라 axios.post('api/login).then(()=>{yield put({type: ...})})\n// fork였다면 그냥 axios.post('api/login)와 같음\n// 즉, API에 post한 다음 끝나면 다음것 put실행한다(fork면 명령내리고 받기전에 바로다음것)\n// yield는 await과 비슷한데 fork는 이를 무시하게끔 즉시실행하는 것\n\n\nfunction* logIn(action) {\n  try {\n    yield delay(1000); // loginAPI(action.data)과 같은뜻: 함수호출 방식이 call은 이렇게\n    // 첫번째자리가 함수, 그다음자리부터 매개변수(인수)\n    // 즉, action에서 data꺼내서 API함수에 전달\n    // 임시보류 const result = yield call(logInAPI, action.data, \"a\", \"b\");\n    // 임시보류 yield put({ type: \"LOG_IN_SUCCESS\", data: result.data });\n    // loginRequest에서 받은 것 바로 success로 보내버림(임시방편)\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    //7. 요청이 실패할 경우를 위해\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n} //8. 성공 결과는 result.data, 실패 결과는 err.response.data에 담김\n\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // 임시보류 const result = yield call(logOutAPI);\n\n    yield put({\n      type: LOG_OUT_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post(\"/api/signUp\");\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n} //9. yield, take 단점: 딱 한번밖에 안받음(일회용) 한번쓰면 사라져버림(따라서 while로 감싸야)\n// while, take는 동기적으로 동작, takeEvery는 비동기로 동작\n// 직관적이지 않고 보기에 그래서 while대신 takeEvery로 동작\n// takeLatest: ex. 실수로 로그인버튼 클릭두번 따닥시 takeevery는 둘다실행하기에 대체\n// 첫번째것만 하고싶으면 takeLeading\n// but, 응답을 한개 취소하는거지 요청을 취소하지는 않음 (요청 2개감)\n// 이를 해결하기 위한 throttle, 3000(3초내에 딱 한번만 실행)\n// throttle 잘 안쓰고 보통 takelatest하고 서버에서 요청을 검토해보고 막도록 함\n// 10. 서버구현 아직 안해서 call logInAPI 다 에러날 것이라 delay로 임시대체\n//3. take: LOG_IN액션이 실행될때까지 기다리겠다. 그리고 logIn실행\n//   logIn관련된 매개변수(data)가 logIn()함수의 action에 전달\n//   action.type: LOG_IN_REQUEST, actin.data: login data 포함\n\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n} //1. all: 배열 내의 것들을 동시실행(배열을 받음)\n//2. fork, call: 함수실행 명령어(fork와 call의 차이점 존재함)\n//fork: 비동기함수호출(기다리지않고 바로 다음것 실행), call: 동기함수호출(기다린후 실행)\n//# call, yield등을 쓰는 이유: test할 때 편함(a.next()함수실행으로 하나씩 버그검사, test코드 짜둬야 함)\n\n\nexport default function* userSaga() {\n  yield all([// fork(watchFollow),\n  // fork(watchUnfollow),\n  fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/sagas/user.js"],"names":["axios","delay","put","all","fork","takeLatest","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","data","a","b","post","logIn","action","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","console","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { delay, put, all, fork, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n} from \"../reducers/user\";\r\n// saga's generator\r\n// const gen = function* () {console.log(1); yield; console.log(2); yield 4;}\r\n// const generator = gen() --> 객체생성,\r\n// generator.next() --> gen 실행 '1', 재실행 '2'(value: 4, done: true)\r\n// 중단점이 있는 함수(yield는 멈춤, yield뒤에 값: value)\r\n// while(true){yield '무한';} : 무한반복이 아니라 매번 중단됨('무한', done:false)\r\n// function* watchLogin(){yield take('LOG_IN', logIn)}\r\n\r\n// 5. 여긴 generator함수 아님(data를 받아서 data와 함께 api에 넣음 - 바로 실행)!!\r\n// data는 아래함수의 action.data\r\nfunction logInAPI(data, a, b) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\n// 4. logIn 실행\r\n// 6. loginAPI를 실행시켜서 result로 결과를 받음\r\n// put: dispatch와 같음(액션객체를 dispatch)\r\n// call: 동기함수실행\r\n// call이라 axios.post('api/login).then(()=>{yield put({type: ...})})\r\n// fork였다면 그냥 axios.post('api/login)와 같음\r\n// 즉, API에 post한 다음 끝나면 다음것 put실행한다(fork면 명령내리고 받기전에 바로다음것)\r\n// yield는 await과 비슷한데 fork는 이를 무시하게끔 즉시실행하는 것\r\nfunction* logIn(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // loginAPI(action.data)과 같은뜻: 함수호출 방식이 call은 이렇게\r\n    // 첫번째자리가 함수, 그다음자리부터 매개변수(인수)\r\n    // 즉, action에서 data꺼내서 API함수에 전달\r\n    // 임시보류 const result = yield call(logInAPI, action.data, \"a\", \"b\");\r\n    // 임시보류 yield put({ type: \"LOG_IN_SUCCESS\", data: result.data });\r\n    // loginRequest에서 받은 것 바로 success로 보내버림(임시방편)\r\n    yield put({ type: LOG_IN_SUCCESS, data: action.data });\r\n  } catch (err) {\r\n    //7. 요청이 실패할 경우를 위해\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n//8. 성공 결과는 result.data, 실패 결과는 err.response.data에 담김\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    // 임시보류 const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI() {\r\n  return axios.post(\"/api/signUp\");\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    // const result = yield call(signUpAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n//9. yield, take 단점: 딱 한번밖에 안받음(일회용) 한번쓰면 사라져버림(따라서 while로 감싸야)\r\n// while, take는 동기적으로 동작, takeEvery는 비동기로 동작\r\n// 직관적이지 않고 보기에 그래서 while대신 takeEvery로 동작\r\n// takeLatest: ex. 실수로 로그인버튼 클릭두번 따닥시 takeevery는 둘다실행하기에 대체\r\n// 첫번째것만 하고싶으면 takeLeading\r\n// but, 응답을 한개 취소하는거지 요청을 취소하지는 않음 (요청 2개감)\r\n// 이를 해결하기 위한 throttle, 3000(3초내에 딱 한번만 실행)\r\n// throttle 잘 안쓰고 보통 takelatest하고 서버에서 요청을 검토해보고 막도록 함\r\n// 10. 서버구현 아직 안해서 call logInAPI 다 에러날 것이라 delay로 임시대체\r\n\r\n//3. take: LOG_IN액션이 실행될때까지 기다리겠다. 그리고 logIn실행\r\n//   logIn관련된 매개변수(data)가 logIn()함수의 action에 전달\r\n//   action.type: LOG_IN_REQUEST, actin.data: login data 포함\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n//1. all: 배열 내의 것들을 동시실행(배열을 받음)\r\n//2. fork, call: 함수실행 명령어(fork와 call의 차이점 존재함)\r\n//fork: 비동기함수호출(기다리지않고 바로 다음것 실행), call: 동기함수호출(기다린후 실행)\r\n//# call, yield등을 쓰는 이유: test할 때 편함(a.next()함수실행으로 하나씩 버그검사, test코드 짜둬야 함)\r\nexport default function* userSaga() {\r\n  yield all([\r\n    // fork(watchFollow),\r\n    // fork(watchUnfollow),\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}