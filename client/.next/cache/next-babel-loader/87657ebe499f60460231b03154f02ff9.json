{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from \"shortid\"; // 대소문자 구분: DB 시퀄라이즈 해당 정보와 다른정보가 합쳐질 경우 대문자로 나옴\n// id, content는 post 자체의 속성\n// imagePaths: 이미지 업로드시 이미지 경로저장\n// postAdded: 게시글 추가가 완료되었을 때 true\n// id: 컴포넌트에 map함수를 통해 post별로 순서부여할때 등 사용\n// 댓글구조: mainPosts에서 id를 찾아서 해당되는 게시물의 Comments로 접근\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"전세환\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프래스,\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://newsimg.hankookilbo.com/cms/articlerelease/2020/04/21/202004211422083541_3.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://wonderfulmind.co.kr/wp-content/uploads/2018/10/man-on-top-of-books-e1538933803436.jpg\"\n    }, {\n      id: shortId.generate(),\n      src: \"http://tcpschool.com/lectures/img_deeplearning_07_reinforcement.png\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nemes\"\n      },\n      content: \"우와 개정판이 나왔네요~\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"hemes\"\n      },\n      content: \"좋네욬ㅋㅋ\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // shortId: id가 겹치지 않도록 만들어주는 library\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"전세환\"\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // dummyPost 앞에다 추가해서 게시글 맨 위에 올리게끔\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // dummyPost 앞에다 추가해서 게시글 맨 위에 올리게끔\n        mainPosts: state.mainPosts.filter(v => v.id !== action.data),\n        removePostLoading: false,\n        removePostDone: true\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommenttDone: false,\n        addCommentError: null\n      });\n    // 1. case문 내에선 {}블록씌워야 함\n    // 불변성을 지키기 위한 노력\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","error","filter","v","addCommenttDone","postIndex","findIndex","postId","post"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\r\n\r\n// 대소문자 구분: DB 시퀄라이즈 해당 정보와 다른정보가 합쳐질 경우 대문자로 나옴\r\n// id, content는 post 자체의 속성\r\n// imagePaths: 이미지 업로드시 이미지 경로저장\r\n// postAdded: 게시글 추가가 완료되었을 때 true\r\n// id: 컴포넌트에 map함수를 통해 post별로 순서부여할때 등 사용\r\n\r\n// 댓글구조: mainPosts에서 id를 찾아서 해당되는 게시물의 Comments로 접근\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"전세환\",\r\n      },\r\n      content: \"첫 번째 게시글 #해시태그 #익스프래스,\",\r\n      Images: [\r\n        {\r\n          id: shortId.generate(),\r\n          src:\r\n            \"https://newsimg.hankookilbo.com/cms/articlerelease/2020/04/21/202004211422083541_3.jpg\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src:\r\n            \"https://wonderfulmind.co.kr/wp-content/uploads/2018/10/man-on-top-of-books-e1538933803436.jpg\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          src:\r\n            \"http://tcpschool.com/lectures/img_deeplearning_07_reinforcement.png\",\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"nemes\",\r\n          },\r\n          content: \"우와 개정판이 나왔네요~\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"hemes\",\r\n          },\r\n          content: \"좋네욬ㅋㅋ\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = data => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = data => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n// shortId: id가 겹치지 않도록 만들어주는 library\r\nconst dummyPost = data => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로초\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = data => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"전세환\",\r\n  },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        addPostLoading: true,\r\n        addPostDone: false,\r\n        addPostError: null,\r\n      };\r\n    case ADD_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        // dummyPost 앞에다 추가해서 게시글 맨 위에 올리게끔\r\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n        addPostLoading: false,\r\n        addPostDone: true,\r\n      };\r\n    case ADD_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        addPostLoading: false,\r\n        addPostError: action.error,\r\n      };\r\n\r\n    case REMOVE_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        removePostLoading: true,\r\n        removePostDone: false,\r\n        removePostError: null,\r\n      };\r\n    case REMOVE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        // dummyPost 앞에다 추가해서 게시글 맨 위에 올리게끔\r\n        mainPosts: state.mainPosts.filter(v => v.id !== action.data),\r\n        removePostLoading: false,\r\n        removePostDone: true,\r\n      };\r\n    case REMOVE_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        removePostLoading: false,\r\n        removePostError: action.error,\r\n      };\r\n\r\n    case ADD_COMMENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: true,\r\n        addCommenttDone: false,\r\n        addCommentError: null,\r\n      };\r\n\r\n    // 1. case문 내에선 {}블록씌워야 함\r\n    // 불변성을 지키기 위한 노력\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const postIndex = state.mainPosts.findIndex(\r\n        v => v.id === action.data.postId\r\n      );\r\n      const post = { ...state.mainPosts[postIndex] };\r\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      const mainPosts = [...state.mainPosts];\r\n      mainPosts[postIndex] = post;\r\n      return {\r\n        ...state,\r\n        mainPosts,\r\n        addCommentLoading: false,\r\n        addCommentDone: true,\r\n      };\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentError: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}