{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\";\nconst initialState = {\n  user: {},\n  post: {}\n}; //async action creator(리덕스 사가)\n// //action creator\n// const changeNickname = data => {\n//   return { type: \"CHANGE_NICKNAME\", data };\n// };\n// changeNickname(\"neue zeal\");\n// // {type: 'CHANGE_NICKNAME', data: 'neue zeal'}\n// store.dispatch(changeNickname(\"mighty tak\"));\n// (이전상태, 액션) => 다음상태\n// hydrate를 위해 index 리듀서를 추가\n\nconst rootReducer = combineReducer({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","initialState","rootReducer","combineReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,YAAY,GAAG;AACnBF,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB,C,CAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AACA,MAAME,WAAW,GAAGC,cAAc,CAAC;AACjCC,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC7B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKV,OAAL;AACEW,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AACF;AACE,eAAOL,KAAP;AALJ;AAOD,GATgC;AAUjCN,EAAAA,IAViC;AAWjCC,EAAAA;AAXiC,CAAD,CAAlC;AAcA,eAAeE,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nimport user from \"./user\";\r\nimport post from \"./post\";\r\n\r\nconst initialState = {\r\n  user: {},\r\n  post: {},\r\n};\r\n\r\n//async action creator(리덕스 사가)\r\n\r\n// //action creator\r\n// const changeNickname = data => {\r\n//   return { type: \"CHANGE_NICKNAME\", data };\r\n// };\r\n\r\n// changeNickname(\"neue zeal\");\r\n// // {type: 'CHANGE_NICKNAME', data: 'neue zeal'}\r\n// store.dispatch(changeNickname(\"mighty tak\"));\r\n\r\n// (이전상태, 액션) => 다음상태\r\n// hydrate를 위해 index 리듀서를 추가\r\nconst rootReducer = combineReducer({\r\n  index: (state = {}, action) => {\r\n    switch (action.type) {\r\n      case HYDRATE:\r\n        console.log(\"HYDRATE\", action);\r\n        return { ...state, ...action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n  user,\r\n  post,\r\n});\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}