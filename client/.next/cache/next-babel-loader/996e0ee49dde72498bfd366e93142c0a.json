{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arthu\\\\Documents\\\\nextpus_2020\\\\client\\\\components\\\\PostCardContent.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport PropTypes from \"prop-types\"; // #해시태그에 링크걸어서 포스팅 필터링하기\n\nconst PostCardContent = ({\n  postData\n}) => __jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }\n}, postData.split(/(#[^\\s#]+)/g).map(v => {\n  if (v.match(/(#[^\\s]+)/)) {\n    // 해쉬태그인 애들은 Link컴포넌트를 통한 리턴\n    // slice(1)은 #을 뗀것\n    return __jsx(Link, {\n      href: {\n        pathname: \"/hashtag\",\n        query: {\n          tag: v.slice(1)\n        }\n      },\n      as: `/hashtag/${v.slice(1)}`,\n      key: v,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, v));\n  } // 아닌애들은 그냥 리턴\n\n\n  return v;\n}));\n\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired\n};\nexport default PostCardContent;","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/components/PostCardContent.js"],"names":["React","Link","PropTypes","PostCardContent","postData","split","map","v","match","pathname","query","tag","slice","propTypes","string","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAKGA,QAAQ,CAACC,KAAT,CAAe,aAAf,EAA8BC,GAA9B,CAAkCC,CAAC,IAAI;AACtC,MAAIA,CAAC,CAACC,KAAF,CAAQ,WAAR,CAAJ,EAA0B;AACxB;AACA;AACA,WACE,MAAC,IAAD;AACE,MAAA,IAAI,EAAE;AAAEC,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,GAAG,EAAEJ,CAAC,CAACK,KAAF,CAAQ,CAAR;AAAP;AAA/B,OADR;AAEE,MAAA,EAAE,EAAG,YAAWL,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAW,EAF7B;AAGE,MAAA,GAAG,EAAEL,CAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,CAAJ,CALF,CADF;AASD,GAbqC,CActC;;;AACA,SAAOA,CAAP;AACD,CAhBA,CALH,CADF;;AA0BAJ,eAAe,CAACU,SAAhB,GAA4B;AAC1BT,EAAAA,QAAQ,EAAEF,SAAS,CAACY,MAAV,CAAiBC;AADD,CAA5B;AAIA,eAAeZ,eAAf","sourcesContent":["import React from \"react\";\r\nimport Link from \"next/link\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// #해시태그에 링크걸어서 포스팅 필터링하기\r\nconst PostCardContent = ({ postData }) => (\r\n  <div>\r\n    {/* 정규표현식: / 내용물 /  regexr 참고 */}\r\n    {/* ...:3글자, +:그다음글자모두선택, []:공백제거, 내부글자들 중에서선택*/}\r\n    {/* ^~: ^이후글자들 포함시 선택제외 \\s:공백 두번째#은 #앞에서 끊어주기 위해(ex. #첫째#둘째 이거분리)*/}\r\n    {/* ()괄호로 감싸줘야 2번째, 3번째것도 별도로 포함이 됨 */}\r\n    {postData.split(/(#[^\\s#]+)/g).map(v => {\r\n      if (v.match(/(#[^\\s]+)/)) {\r\n        // 해쉬태그인 애들은 Link컴포넌트를 통한 리턴\r\n        // slice(1)은 #을 뗀것\r\n        return (\r\n          <Link\r\n            href={{ pathname: \"/hashtag\", query: { tag: v.slice(1) } }}\r\n            as={`/hashtag/${v.slice(1)}`}\r\n            key={v}\r\n          >\r\n            <a>{v}</a>\r\n          </Link>\r\n        );\r\n      }\r\n      // 아닌애들은 그냥 리턴\r\n      return v;\r\n    })}\r\n  </div>\r\n);\r\n\r\nPostCardContent.propTypes = {\r\n  postData: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PostCardContent;\r\n"]},"metadata":{},"sourceType":"module"}