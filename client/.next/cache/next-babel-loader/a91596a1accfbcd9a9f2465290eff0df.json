{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arthu\\\\Documents\\\\nextpus_2020\\\\client\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport PropTPostCardypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from \"@ant-design/icons\";\nimport Link from \"next/link\";\nimport moment from \"moment\";\nimport PostImages from \"./PostImages\";\nimport CommentForm from \"./CommentForm\";\nimport PostCardContent from \"./PostCardContent\";\nimport { LIKE_POST_REQUEST, REMOVE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, UPDATE_POST_REQUEST } from \"../reducers/post\";\nimport FollowButton from \"./FollowButton\";\nmoment.locale(\"ko\");\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const {\n    0: editMode,\n    1: setEditMode\n  } = useState(false);\n  const onClickUpdate = useCallback(() => {\n    setEditMode(true);\n  }, []);\n  const onCancelUpdate = useCallback(() => {\n    setEditMode(false);\n  }, []);\n  const onChangePost = useCallback(editText => () => {\n    dispatch({\n      type: UPDATE_POST_REQUEST,\n      data: {\n        PostId: post.id,\n        content: editText\n      }\n    });\n  }, [post]);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const liked = post.Likers.find(v => v.id === id);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 34\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnlike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, !post.RetweetId && __jsx(Button, {\n        onClick: onClickUpdate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 23\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 19\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n    extra: id && __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 22\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    style: {\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, moment(post.createdAt).format(\"YYYY.MM.DD\")), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.Retweet.User.id}`,\n      prefetch: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 19\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content,\n      onChangePost: onChangePost,\n      onCancelUpdate: onCancelUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, moment(post.createdAt).format(\"YYYY.MM.DD\")), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: `/user/${post.User.id}`,\n      prefetch: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 19\n      }\n    }, __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      editMode: editMode,\n      onChangePost: onChangePost,\n      onCancelUpdate: onCancelUpdate,\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }))), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: `/user/${item.User.id}`,\n        prefetch: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 23\n        }\n      }, __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 25\n        }\n      }, item.User.nickname[0]))),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    RetweetId: PropTypes.number,\n    Retweet: PropTypes.objectOf(PropTypes.any)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/components/PostCard.js"],"names":["React","useState","useCallback","PropTPostCardypes","useSelector","useDispatch","Card","Popover","Button","Avatar","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","Link","moment","PostImages","CommentForm","PostCardContent","LIKE_POST_REQUEST","REMOVE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","UPDATE_POST_REQUEST","FollowButton","locale","PostCard","post","dispatch","removePostLoading","state","commentFormOpened","setCommentFormOpened","id","user","me","editMode","setEditMode","onClickUpdate","onCancelUpdate","onChangePost","editText","type","data","PostId","content","onLike","alert","onUnlike","onToggleComment","prev","onRemovePost","onRetweet","liked","Likers","find","v","marginBottom","Images","User","RetweetId","nickname","Retweet","float","createdAt","format","Comments","length","item","propTypes","PropTypes","shape","number","object","string","arrayOf","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport PropTPostCardypes from \"prop-types\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\r\nimport {\r\n  RetweetOutlined,\r\n  HeartOutlined,\r\n  MessageOutlined,\r\n  EllipsisOutlined,\r\n  HeartTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport Link from \"next/link\";\r\nimport moment from \"moment\";\r\n\r\nimport PostImages from \"./PostImages\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport PostCardContent from \"./PostCardContent\";\r\nimport {\r\n  LIKE_POST_REQUEST,\r\n  REMOVE_POST_REQUEST,\r\n  UNLIKE_POST_REQUEST,\r\n  RETWEET_REQUEST,\r\n  UPDATE_POST_REQUEST,\r\n} from \"../reducers/post\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\nmoment.locale(\"ko\");\r\n\r\nconst PostCard = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const { removePostLoading } = useSelector(state => state.post);\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const id = useSelector(state => state.user.me?.id);\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const onClickUpdate = useCallback(() => {\r\n    setEditMode(true);\r\n  }, []);\r\n\r\n  const onCancelUpdate = useCallback(() => {\r\n    setEditMode(false);\r\n  }, []);\r\n\r\n  const onChangePost = useCallback(\r\n    editText => () => {\r\n      dispatch({\r\n        type: UPDATE_POST_REQUEST,\r\n        data: {\r\n          PostId: post.id,\r\n          content: editText,\r\n        },\r\n      });\r\n    },\r\n    [post]\r\n  );\r\n\r\n  const onLike = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"로그인이 필요합니다.\");\r\n    }\r\n    return dispatch({\r\n      type: LIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n  const onUnlike = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"로그인이 필요합니다.\");\r\n    }\r\n    return dispatch({\r\n      type: UNLIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n  }, []);\r\n\r\n  const onRemovePost = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"로그인이 필요합니다.\");\r\n    }\r\n    return dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!id) {\r\n      return alert(\"로그인이 필요합니다.\");\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const liked = post.Likers.find(v => v.id === id);\r\n  return (\r\n    <div style={{ marginBottom: 20 }}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n          liked ? (\r\n            <HeartTwoTone\r\n              twoToneColor=\"#eb2f96\"\r\n              key=\"heart\"\r\n              onClick={onUnlike}\r\n            />\r\n          ) : (\r\n            <HeartOutlined key=\"heart\" onClick={onLike} />\r\n          ),\r\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"more\"\r\n            content={\r\n              <Button.Group>\r\n                {id && post.User.id === id ? (\r\n                  <>\r\n                    {!post.RetweetId && (\r\n                      <Button onClick={onClickUpdate}>수정</Button>\r\n                    )}\r\n                    <Button\r\n                      type=\"danger\"\r\n                      loading={removePostLoading}\r\n                      onClick={onRemovePost}\r\n                    >\r\n                      삭제\r\n                    </Button>\r\n                  </>\r\n                ) : (\r\n                  <Button>신고</Button>\r\n                )}\r\n              </Button.Group>\r\n            }\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        title={\r\n          post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null\r\n        }\r\n        extra={id && <FollowButton post={post} />}\r\n      >\r\n        {post.RetweetId && post.Retweet ? (\r\n          <Card\r\n            cover={\r\n              post.Retweet.Images[0] && (\r\n                <PostImages images={post.Retweet.Images} />\r\n              )\r\n            }\r\n          >\r\n            <div style={{ float: \"right\" }}>\r\n              {moment(post.createdAt).format(\"YYYY.MM.DD\")}\r\n            </div>\r\n            <Card.Meta\r\n              avatar={\r\n                <Link href={`/user/${post.Retweet.User.id}`} prefetch={false}>\r\n                  <a>\r\n                    <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\r\n                  </a>\r\n                </Link>\r\n              }\r\n              title={post.Retweet.User.nickname}\r\n              description={\r\n                <PostCardContent\r\n                  postData={post.Retweet.content}\r\n                  onChangePost={onChangePost}\r\n                  onCancelUpdate={onCancelUpdate}\r\n                />\r\n              }\r\n            />\r\n          </Card>\r\n        ) : (\r\n          <>\r\n            <div style={{ float: \"right\" }}>\r\n              {moment(post.createdAt).format(\"YYYY.MM.DD\")}\r\n            </div>\r\n            <Card.Meta\r\n              avatar={\r\n                <Link href={`/user/${post.User.id}`} prefetch={false}>\r\n                  <a>\r\n                    <Avatar>{post.User.nickname[0]}</Avatar>\r\n                  </a>\r\n                </Link>\r\n              }\r\n              title={post.User.nickname}\r\n              description={\r\n                <PostCardContent\r\n                  editMode={editMode}\r\n                  onChangePost={onChangePost}\r\n                  onCancelUpdate={onCancelUpdate}\r\n                  postData={post.content}\r\n                />\r\n              }\r\n            />\r\n          </>\r\n        )}\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <div>\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments.length}개의 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments}\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={\r\n                    <Link href={`/user/${item.User.id}`} prefetch={false}>\r\n                      <a>\r\n                        <Avatar>{item.User.nickname[0]}</Avatar>\r\n                      </a>\r\n                    </Link>\r\n                  }\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n    RetweetId: PropTypes.number,\r\n    Retweet: PropTypes.objectOf(PropTypes.any),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}