{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arthu\\\\Documents\\\\nextpus_2020\\\\client\\\\components\\\\ImagesZoom\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Slick from \"react-slick\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { CloseOutlined } from \"@ant-design/icons\"; // 확대하기 전체화면으로 채우기 위한 CSS\n\nconst Overlay = styled.div.withConfig({\n  displayName: \"ImagesZoom__Overlay\",\n  componentId: \"ltfb4f-0\"\n})([\"position:fixed;z-index:5000;top:0;left:0;right:0;bottom:0;\"]);\nconst Header = styled.header.withConfig({\n  displayName: \"ImagesZoom__Header\",\n  componentId: \"ltfb4f-1\"\n})([\"header:44px;background:white;position:relative;padding:0;text-align:center;& h1{margin:0;font-size:17px;color:#333;line-height:44px;}\"]);\nconst CloseButton = styled(CloseOutlined).withConfig({\n  displayName: \"ImagesZoom__CloseButton\",\n  componentId: \"ltfb4f-2\"\n})([\"position:absolute;right:0;top:0;padding:15px;line-height:14px;cursor:pointer;\"]);\nconst SlickWrapper = styled.div.withConfig({\n  displayName: \"ImagesZoom__SlickWrapper\",\n  componentId: \"ltfb4f-3\"\n})([\"height:calc(100% - 44px);background:#090909;\"]);\nconst ImageWrapper = styled.div.withConfig({\n  displayName: \"ImagesZoom__ImageWrapper\",\n  componentId: \"ltfb4f-4\"\n})([\"padding:32px;text-align:center;& img{margin:0 auto;max-height:750px;}\"]);\nconst Indicator = styled.div.withConfig({\n  displayName: \"ImagesZoom__Indicator\",\n  componentId: \"ltfb4f-5\"\n})([\"text-align:center;& > div{width:75px;height:30px;line-height:30px;border-radius:15px;background:#313131;display:inline-block;text-align:center;color:white;font-size:15px;}\"]); // 기본으로 설정되는 라이브러리의 className과 기존 세팅된 css를 변경하기 위한 방법\n// (ex. slick-slide는 slick라이브러리에서 이미 정해진 클래스명)\n// Global로 할 경우 또한, classname이 변경되지 않고 정한 그대로..\n\nconst Global = createGlobalStyle`\n.slick-slide {\n  display: inline-block;\n}\n`;\n\nconst ImagesZoom = ({\n  images,\n  onClose\n}) => {\n  // 현재 슬라이드 (번호?)에 대한 state\n  const {\n    0: currentSlide,\n    1: setCurrentSlide\n  } = useState(0);\n  const handleKeyPress = useCallback(e => {\n    if (e.key == 27) {\n      onClose();\n    }\n  }, []);\n  return __jsx(Overlay, {\n    onKeyDown: handleKeyPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, __jsx(Global, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }), __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"\\uC0C1\\uC138 \\uC774\\uBBF8\\uC9C0\"), __jsx(CloseButton, {\n    onClick: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"X\")), __jsx(SlickWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, __jsx(Slick, {\n    initialSlide: 0 // 슬라이드 넘길때 번호 부여\n    // arrows: 양옆에 화살표 버튼\n    ,\n    afterChange: slide => setCurrentSlide(slide),\n    infinite: true,\n    arrows: false,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, images.map(v => __jsx(ImageWrapper, {\n    key: v.src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, __jsx(\"img\", {\n    src: v.src,\n    alt: v.src,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  })))), __jsx(Indicator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, currentSlide + 1, \"\", \"/\", images.length)))));\n};\n\nImagesZoom.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onClose: PropTypes.func.isRequired\n};\nexport default ImagesZoom;","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/components/ImagesZoom/index.js"],"names":["React","useState","useCallback","PropTypes","Slick","styled","createGlobalStyle","CloseOutlined","Overlay","div","Header","header","CloseButton","SlickWrapper","ImageWrapper","Indicator","Global","ImagesZoom","images","onClose","currentSlide","setCurrentSlide","handleKeyPress","e","key","slide","map","v","src","length","propTypes","arrayOf","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Slick from \"react-slick\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\n\r\n// 확대하기 전체화면으로 채우기 위한 CSS\r\nconst Overlay = styled.div`\r\n  position: fixed;\r\n  z-index: 5000;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  header: 44px;\r\n  background: white;\r\n  position: relative;\r\n  padding: 0;\r\n  text-align: center;\r\n\r\n  /* Header내의 h1컴포넌트 변경 */\r\n  & h1 {\r\n    margin: 0;\r\n    font-size: 17px;\r\n    color: #333;\r\n    line-height: 44px;\r\n  }\r\n`;\r\n\r\nconst CloseButton = styled(CloseOutlined)`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  padding: 15px;\r\n  line-height: 14px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst SlickWrapper = styled.div`\r\n  height: calc(100% - 44px);\r\n  background: #090909;\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n  padding: 32px;\r\n  text-align: center;\r\n\r\n  & img {\r\n    margin: 0 auto;\r\n    max-height: 750px;\r\n  }\r\n`;\r\n\r\nconst Indicator = styled.div`\r\n  text-align: center;\r\n\r\n  & > div {\r\n    width: 75px;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    border-radius: 15px;\r\n    background: #313131;\r\n    display: inline-block;\r\n    text-align: center;\r\n    color: white;\r\n    font-size: 15px;\r\n  }\r\n`;\r\n\r\n// 기본으로 설정되는 라이브러리의 className과 기존 세팅된 css를 변경하기 위한 방법\r\n// (ex. slick-slide는 slick라이브러리에서 이미 정해진 클래스명)\r\n// Global로 할 경우 또한, classname이 변경되지 않고 정한 그대로..\r\nconst Global = createGlobalStyle`\r\n.slick-slide {\r\n  display: inline-block;\r\n}\r\n`;\r\n\r\nconst ImagesZoom = ({ images, onClose }) => {\r\n  // 현재 슬라이드 (번호?)에 대한 state\r\n  const [currentSlide, setCurrentSlide] = useState(0);\r\n\r\n  const handleKeyPress = useCallback(e => {\r\n    if (e.key == 27) {\r\n      onClose();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Overlay onKeyDown={handleKeyPress}>\r\n      <Global />\r\n      <Header>\r\n        <h1>상세 이미지</h1>\r\n        <CloseButton onClick={onClose}>X</CloseButton>\r\n      </Header>\r\n      <SlickWrapper>\r\n        <div>\r\n          <Slick\r\n            initialSlide={0}\r\n            // 슬라이드 넘길때 번호 부여\r\n            // arrows: 양옆에 화살표 버튼\r\n            afterChange={slide => setCurrentSlide(slide)}\r\n            infinite\r\n            arrows={false}\r\n            slidesToShow={1}\r\n            slidesToScroll={1}\r\n          >\r\n            {images.map(v => (\r\n              <ImageWrapper key={v.src}>\r\n                <img src={v.src} alt={v.src} />\r\n              </ImageWrapper>\r\n            ))}\r\n          </Slick>\r\n          {/* 페이지 쪽수 화면 하단에 나타내기 */}\r\n          <Indicator>\r\n            <div>\r\n              {currentSlide + 1}\r\n              {\"\"}/{images.length}\r\n            </div>\r\n          </Indicator>\r\n        </div>\r\n      </SlickWrapper>\r\n    </Overlay>\r\n  );\r\n};\r\n\r\nImagesZoom.propTypes = {\r\n  images: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ImagesZoom;\r\n"]},"metadata":{},"sourceType":"module"}