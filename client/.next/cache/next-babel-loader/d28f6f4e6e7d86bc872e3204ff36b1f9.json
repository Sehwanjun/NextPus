{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\n// import axios from \"axios\";\nimport { delay, put, all, fork, takeLatest } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\"; // function loadPostsAPI(data) {\n//   return axios.get(\"/api/posts\", data);\n// }\n\nfunction loadPosts(action) {\n  return _regeneratorRuntime.wrap(function loadPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10)\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n} // function addPostAPI(data) {\n//   return axios.post(\"/api/post\", data);\n// }\n\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          // 임시보류 const result = yield call(addPostAPI, action.data);\n          // id를 생성해서 post와 user리덕스 연결고리\n          // 어떤 액션이 여러 리듀서의 데이터를 동시에(user, post)바꿔야한다면 여러 액션을 호출해주면 됨\n          id = shortId.generate();\n          _context2.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            } // 포스팅에 글 입력한 내용\n\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n} // function removePostAPI(data) {\n//   return axios.delete(\"/api/post\", data);\n// }\n\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n} // function addCommentAPI(data) {\n//   return axios.post(`/api/post/${data.postId}/comment`, data);\n// }\n\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data // CommentForm에서 onSubmitComment로부터 불러들임\n\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadPosts), fork(watchAddComment), fork(watchRemovePost)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/sagas/post.js"],"names":["loadPosts","addPost","removePost","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","delay","put","all","fork","takeLatest","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","action","type","data","console","error","response","id","generate","content"],"mappings":"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","sourcesContent":["// import axios from \"axios\";\r\nimport { delay, put, all, fork, takeLatest } from \"redux-saga/effects\";\r\nimport shortId from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  generateDummyPost,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\n// function loadPostsAPI(data) {\r\n//   return axios.get(\"/api/posts\", data);\r\n// }\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    // const result = yield call(loadPostsAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addPostAPI(data) {\r\n//   return axios.post(\"/api/post\", data);\r\n// }\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // 임시보류 const result = yield call(addPostAPI, action.data);\r\n    // id를 생성해서 post와 user리덕스 연결고리\r\n    // 어떤 액션이 여러 리듀서의 데이터를 동시에(user, post)바꿔야한다면 여러 액션을 호출해주면 됨\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      }, // 포스팅에 글 입력한 내용\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function removePostAPI(data) {\r\n//   return axios.delete(\"/api/post\", data);\r\n// }\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    // POST 리듀서 상태 변경\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    // USER 리듀서 상태 변경\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function addCommentAPI(data) {\r\n//   return axios.post(`/api/post/${data.postId}/comment`, data);\r\n// }\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data, // CommentForm에서 onSubmitComment로부터 불러들임\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}