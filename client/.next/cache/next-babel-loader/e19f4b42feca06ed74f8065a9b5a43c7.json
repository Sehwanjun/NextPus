{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\arthu\\\\Documents\\\\nextpus_2020\\\\client\\\\components\\\\PostCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CommentForm from \"./CommentForm\";\nimport PostImages from \"./PostImages\";\nimport PropTypes from \"prop-types\";\nimport { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from \"@ant-design/icons\"; // post를 부모로부터 받아옴(main.js)\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      liked = _useState[0],\n      setLiked = _useState[1];\n\n  var _useState2 = useState(false),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1]; // 좋아요버튼 on/off 기능관련\n\n\n  var onToggleLike = useCallback(function () {\n    setLiked(function (prev) {\n      return !prev;\n    });\n  }, []); // 댓글 보이기 on/off 기능관련\n\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []); // 존재여부 확인: 옵셔널 체이닝 연산자 - me.id가 있으면 id로 바꿔주고 아니면 undefined\n\n  var id = useSelector(function (state) {\n    return state.user.me && state.user.me.id;\n  });\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 34\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 19\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }))] // extra={<FollowButton post={post} />}\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), \"} />\", __jsx(Image, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), __jsx(Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }), __jsx(Buttons, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, __jsx(CommentForm, {\n    post: post,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    itemLayout: \"horizonal\",\n    dataSource: post.Comments // post.comments가 item으로 들어감\n    ,\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 27\n          }\n        }, item.User.nickname[0]),\n        content: item.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), \" \"), __jsx(Comments, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(PostCard, \"qjo02WruhXZcdwWdlG/xwVw2yKY=\", false, function () {\n  return [useSelector];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object) // Likers: PropTypes.arrayOf(PropTypes.object),\n    // RetweetId: PropTypes.number,\n    // Retweet: PropTypes.objectOf(PropTypes.any),\n\n  }).isRequired\n};\nexport default PostCard; // import React, { useState, useCallback } from \"react\";\n// import PropTPostCardypes from \"prop-types\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\n// import {\n//   RetweetOutlined,\n//   HeartOutlined,\n//   MessageOutlined,\n//   EllipsisOutlined,\n//   HeartTwoTone,\n// } from \"@ant-design/icons\";\n// import Link from \"next/link\";\n// import moment from \"moment\";\n// import PostImages from \"./PostImages\";\n// import CommentForm from \"./CommentForm\";\n// import PostCardContent from \"./PostCardContent\";\n// import {\n//   LIKE_POST_REQUEST,\n//   REMOVE_POST_REQUEST,\n//   UNLIKE_POST_REQUEST,\n//   RETWEET_REQUEST,\n//   UPDATE_POST_REQUEST,\n// } from \"../reducers/post\";\n// import FollowButton from \"./FollowButton\";\n// moment.locale(\"ko\");\n// const PostCard = ({ post }) => {\n//   const dispatch = useDispatch();\n//   const { removePostLoading } = useSelector(state => state.post);\n//   const [commentFormOpened, setCommentFormOpened] = useState(false);\n//   const id = useSelector(state => state.user.me?.id);\n//   const [editMode, setEditMode] = useState(false);\n//   const onClickUpdate = useCallback(() => {\n//     setEditMode(true);\n//   }, []);\n//   const onCancelUpdate = useCallback(() => {\n//     setEditMode(false);\n//   }, []);\n//   const onChangePost = useCallback(\n//     editText => () => {\n//       dispatch({\n//         type: UPDATE_POST_REQUEST,\n//         data: {\n//           PostId: post.id,\n//           content: editText,\n//         },\n//       });\n//     },\n//     [post]\n//   );\n//   const onLike = useCallback(() => {\n//     if (!id) {\n//       return alert(\"로그인이 필요합니다.\");\n//     }\n//     return dispatch({\n//       type: LIKE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, [id]);\n//   const onUnlike = useCallback(() => {\n//     if (!id) {\n//       return alert(\"로그인이 필요합니다.\");\n//     }\n//     return dispatch({\n//       type: UNLIKE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, [id]);\n//   const onToggleComment = useCallback(() => {\n//     setCommentFormOpened(prev => !prev);\n//   }, []);\n//   const onRemovePost = useCallback(() => {\n//     if (!id) {\n//       return alert(\"로그인이 필요합니다.\");\n//     }\n//     return dispatch({\n//       type: REMOVE_POST_REQUEST,\n//       data: post.id,\n//     });\n//   }, [id]);\n//   const onRetweet = useCallback(() => {\n//     if (!id) {\n//       return alert(\"로그인이 필요합니다.\");\n//     }\n//     return dispatch({\n//       type: RETWEET_REQUEST,\n//       data: post.id,\n//     });\n//   }, [id]);\n//   const liked = post.Likers.find(v => v.id === id);\n//   return (\n//     <div style={{ marginBottom: 20 }}>\n//       <Card\n//         cover={post.Images[0] && <PostImages images={post.Images} />}\n//         actions={[\n//           <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\n//           liked ? (\n//             <HeartTwoTone\n//               twoToneColor=\"#eb2f96\"\n//               key=\"heart\"\n//               onClick={onUnlike}\n//             />\n//           ) : (\n//             <HeartOutlined key=\"heart\" onClick={onLike} />\n//           ),\n//           <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n//           <Popover\n//             key=\"more\"\n//             content={\n//               <Button.Group>\n//                 {id && post.User.id === id ? (\n//                   <>\n//                     {!post.RetweetId && (\n//                       <Button onClick={onClickUpdate}>수정</Button>\n//                     )}\n//                     <Button\n//                       type=\"danger\"\n//                       loading={removePostLoading}\n//                       onClick={onRemovePost}\n//                     >\n//                       삭제\n//                     </Button>\n//                   </>\n//                 ) : (\n//                   <Button>신고</Button>\n//                 )}\n//               </Button.Group>\n//             }\n//           >\n//             <EllipsisOutlined />\n//           </Popover>,\n//         ]}\n//         title={\n//           post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null\n//         }\n//         extra={id && <FollowButton post={post} />}\n//       >\n//         {post.RetweetId && post.Retweet ? (\n//           <Card\n//             cover={\n//               post.Retweet.Images[0] && (\n//                 <PostImages images={post.Retweet.Images} />\n//               )\n//             }\n//           >\n//             <div style={{ float: \"right\" }}>\n//               {moment(post.createdAt).format(\"YYYY.MM.DD\")}\n//             </div>\n//             <Card.Meta\n//               avatar={\n//                 <Link href={`/user/${post.Retweet.User.id}`} prefetch={false}>\n//                   <a>\n//                     <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\n//                   </a>\n//                 </Link>\n//               }\n//               title={post.Retweet.User.nickname}\n//               description={\n//                 <PostCardContent\n//                   postData={post.Retweet.content}\n//                   onChangePost={onChangePost}\n//                   onCancelUpdate={onCancelUpdate}\n//                 />\n//               }\n//             />\n//           </Card>\n//         ) : (\n//           <>\n//             <div style={{ float: \"right\" }}>\n//               {moment(post.createdAt).format(\"YYYY.MM.DD\")}\n//             </div>\n//             <Card.Meta\n//               avatar={\n//                 <Link href={`/user/${post.User.id}`} prefetch={false}>\n//                   <a>\n//                     <Avatar>{post.User.nickname[0]}</Avatar>\n//                   </a>\n//                 </Link>\n//               }\n//               title={post.User.nickname}\n//               description={\n//                 <PostCardContent\n//                   editMode={editMode}\n//                   onChangePost={onChangePost}\n//                   onCancelUpdate={onCancelUpdate}\n//                   postData={post.content}\n//                 />\n//               }\n//             />\n//           </>\n//         )}\n//       </Card>\n//       {commentFormOpened && (\n//         <div>\n//           <CommentForm post={post} />\n//           <List\n//             header={`${post.Comments.length}개의 댓글`}\n//             itemLayout=\"horizontal\"\n//             dataSource={post.Comments}\n//             renderItem={item => (\n//               <li>\n//                 <Comment\n//                   author={item.User.nickname}\n//                   avatar={\n//                     <Link href={`/user/${item.User.id}`} prefetch={false}>\n//                       <a>\n//                         <Avatar>{item.User.nickname[0]}</Avatar>\n//                       </a>\n//                     </Link>\n//                   }\n//                   content={item.content}\n//                 />\n//               </li>\n//             )}\n//           />\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// PostCard.propTypes = {\n//   post: PropTypes.shape({\n//     id: PropTypes.number,\n//     User: PropTypes.object,\n//     content: PropTypes.string,\n//     createdAt: PropTypes.string,\n//     Comments: PropTypes.arrayOf(PropTypes.object),\n//     Images: PropTypes.arrayOf(PropTypes.object),\n//     Likers: PropTypes.arrayOf(PropTypes.object),\n//     RetweetId: PropTypes.number,\n//     Retweet: PropTypes.objectOf(PropTypes.any),\n//   }).isRequired,\n// };\n// export default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/components/PostCard.js"],"names":["React","useState","useCallback","useSelector","useDispatch","CommentForm","PostImages","PropTypes","Card","Popover","Button","Avatar","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","PostCard","post","liked","setLiked","commentFormOpened","setCommentFormOpened","onToggleLike","prev","onToggleComment","id","state","user","me","marginBottom","Images","User","nickname","content","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","isRequired"],"mappings":"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":["import React, { useState, useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport PostImages from \"./PostImages\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\r\nimport {\r\n  RetweetOutlined,\r\n  HeartOutlined,\r\n  MessageOutlined,\r\n  EllipsisOutlined,\r\n  HeartTwoTone,\r\n} from \"@ant-design/icons\";\r\n\r\n// post를 부모로부터 받아옴(main.js)\r\nconst PostCard = ({ post }) => {\r\n  const [liked, setLiked] = useState(false);\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n\r\n  // 좋아요버튼 on/off 기능관련\r\n  const onToggleLike = useCallback(() => {\r\n    setLiked(prev => !prev);\r\n  }, []);\r\n  // 댓글 보이기 on/off 기능관련\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened(prev => !prev);\r\n  }, []);\r\n  // 존재여부 확인: 옵셔널 체이닝 연산자 - me.id가 있으면 id로 바꿔주고 아니면 undefined\r\n  const id = useSelector(state => state.user.me && state.user.me.id);\r\n\r\n  return (\r\n    <div style={{ marginBottom: 20 }}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" />,\r\n          liked ? (\r\n            <HeartTwoTone\r\n              twoToneColor=\"#eb2f96\"\r\n              key=\"heart\"\r\n              onClick={onToggleLike}\r\n            />\r\n          ) : (\r\n            <HeartOutlined key=\"heart\" onClick={onToggleLike} />\r\n          ),\r\n          <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"more\"\r\n            content={\r\n              <Button.Group>\r\n                {/* 내가쓴글권한: 수정/삭제 / 남이쓴 글권한: 신고 */}\r\n                {id && post.User.id === id ? (\r\n                  <>\r\n                    <Button>수정</Button>\r\n                    {/* danger: 붉은색, primary: 파란색 */}\r\n                    <Button type=\"danger\">삭제</Button>\r\n                  </>\r\n                ) : (\r\n                  <Button>신고</Button>\r\n                )}\r\n              </Button.Group>\r\n            }\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        // extra={<FollowButton post={post} />}\r\n      >\r\n        <Card.Meta\r\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n          title={post.User.nickname}\r\n          description={post.content} />}\r\n        />\r\n        <Image />\r\n        <Content />\r\n        <Buttons></Buttons>\r\n      </Card>\r\n      {/* 댓글 */}\r\n      {commentFormOpened && (\r\n        <div>\r\n          {/* 댓글은 게시글에 종속되어있기 때문에 어떤 게시글인지 정보를 받아야 함 따라서 post={post} */}\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments.length}개의 댓글`}\r\n            itemLayout=\"horizonal\"\r\n            dataSource={post.Comments}\r\n            // post.comments가 item으로 들어감\r\n            renderItem={item => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />{\" \"}\r\n        </div>\r\n      )}\r\n\r\n      <Comments />\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    // Likers: PropTypes.arrayOf(PropTypes.object),\r\n    // RetweetId: PropTypes.number,\r\n    // Retweet: PropTypes.objectOf(PropTypes.any),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n\r\n// import React, { useState, useCallback } from \"react\";\r\n// import PropTPostCardypes from \"prop-types\";\r\n// import { useSelector, useDispatch } from \"react-redux\";\r\n// import { Card, Popover, Button, Avatar, List, Comment } from \"antd\";\r\n// import {\r\n//   RetweetOutlined,\r\n//   HeartOutlined,\r\n//   MessageOutlined,\r\n//   EllipsisOutlined,\r\n//   HeartTwoTone,\r\n// } from \"@ant-design/icons\";\r\n// import Link from \"next/link\";\r\n// import moment from \"moment\";\r\n\r\n// import PostImages from \"./PostImages\";\r\n// import CommentForm from \"./CommentForm\";\r\n// import PostCardContent from \"./PostCardContent\";\r\n// import {\r\n//   LIKE_POST_REQUEST,\r\n//   REMOVE_POST_REQUEST,\r\n//   UNLIKE_POST_REQUEST,\r\n//   RETWEET_REQUEST,\r\n//   UPDATE_POST_REQUEST,\r\n// } from \"../reducers/post\";\r\n// import FollowButton from \"./FollowButton\";\r\n\r\n// moment.locale(\"ko\");\r\n\r\n// const PostCard = ({ post }) => {\r\n//   const dispatch = useDispatch();\r\n//   const { removePostLoading } = useSelector(state => state.post);\r\n//   const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n//   const id = useSelector(state => state.user.me?.id);\r\n//   const [editMode, setEditMode] = useState(false);\r\n\r\n//   const onClickUpdate = useCallback(() => {\r\n//     setEditMode(true);\r\n//   }, []);\r\n\r\n//   const onCancelUpdate = useCallback(() => {\r\n//     setEditMode(false);\r\n//   }, []);\r\n\r\n//   const onChangePost = useCallback(\r\n//     editText => () => {\r\n//       dispatch({\r\n//         type: UPDATE_POST_REQUEST,\r\n//         data: {\r\n//           PostId: post.id,\r\n//           content: editText,\r\n//         },\r\n//       });\r\n//     },\r\n//     [post]\r\n//   );\r\n\r\n//   const onLike = useCallback(() => {\r\n//     if (!id) {\r\n//       return alert(\"로그인이 필요합니다.\");\r\n//     }\r\n//     return dispatch({\r\n//       type: LIKE_POST_REQUEST,\r\n//       data: post.id,\r\n//     });\r\n//   }, [id]);\r\n//   const onUnlike = useCallback(() => {\r\n//     if (!id) {\r\n//       return alert(\"로그인이 필요합니다.\");\r\n//     }\r\n//     return dispatch({\r\n//       type: UNLIKE_POST_REQUEST,\r\n//       data: post.id,\r\n//     });\r\n//   }, [id]);\r\n//   const onToggleComment = useCallback(() => {\r\n//     setCommentFormOpened(prev => !prev);\r\n//   }, []);\r\n\r\n//   const onRemovePost = useCallback(() => {\r\n//     if (!id) {\r\n//       return alert(\"로그인이 필요합니다.\");\r\n//     }\r\n//     return dispatch({\r\n//       type: REMOVE_POST_REQUEST,\r\n//       data: post.id,\r\n//     });\r\n//   }, [id]);\r\n\r\n//   const onRetweet = useCallback(() => {\r\n//     if (!id) {\r\n//       return alert(\"로그인이 필요합니다.\");\r\n//     }\r\n//     return dispatch({\r\n//       type: RETWEET_REQUEST,\r\n//       data: post.id,\r\n//     });\r\n//   }, [id]);\r\n\r\n//   const liked = post.Likers.find(v => v.id === id);\r\n//   return (\r\n//     <div style={{ marginBottom: 20 }}>\r\n//       <Card\r\n//         cover={post.Images[0] && <PostImages images={post.Images} />}\r\n//         actions={[\r\n//           <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n//           liked ? (\r\n//             <HeartTwoTone\r\n//               twoToneColor=\"#eb2f96\"\r\n//               key=\"heart\"\r\n//               onClick={onUnlike}\r\n//             />\r\n//           ) : (\r\n//             <HeartOutlined key=\"heart\" onClick={onLike} />\r\n//           ),\r\n//           <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\r\n//           <Popover\r\n//             key=\"more\"\r\n//             content={\r\n//               <Button.Group>\r\n//                 {id && post.User.id === id ? (\r\n//                   <>\r\n//                     {!post.RetweetId && (\r\n//                       <Button onClick={onClickUpdate}>수정</Button>\r\n//                     )}\r\n//                     <Button\r\n//                       type=\"danger\"\r\n//                       loading={removePostLoading}\r\n//                       onClick={onRemovePost}\r\n//                     >\r\n//                       삭제\r\n//                     </Button>\r\n//                   </>\r\n//                 ) : (\r\n//                   <Button>신고</Button>\r\n//                 )}\r\n//               </Button.Group>\r\n//             }\r\n//           >\r\n//             <EllipsisOutlined />\r\n//           </Popover>,\r\n//         ]}\r\n//         title={\r\n//           post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null\r\n//         }\r\n//         extra={id && <FollowButton post={post} />}\r\n//       >\r\n//         {post.RetweetId && post.Retweet ? (\r\n//           <Card\r\n//             cover={\r\n//               post.Retweet.Images[0] && (\r\n//                 <PostImages images={post.Retweet.Images} />\r\n//               )\r\n//             }\r\n//           >\r\n//             <div style={{ float: \"right\" }}>\r\n//               {moment(post.createdAt).format(\"YYYY.MM.DD\")}\r\n//             </div>\r\n//             <Card.Meta\r\n//               avatar={\r\n//                 <Link href={`/user/${post.Retweet.User.id}`} prefetch={false}>\r\n//                   <a>\r\n//                     <Avatar>{post.Retweet.User.nickname[0]}</Avatar>\r\n//                   </a>\r\n//                 </Link>\r\n//               }\r\n//               title={post.Retweet.User.nickname}\r\n//               description={\r\n//                 <PostCardContent\r\n//                   postData={post.Retweet.content}\r\n//                   onChangePost={onChangePost}\r\n//                   onCancelUpdate={onCancelUpdate}\r\n//                 />\r\n//               }\r\n//             />\r\n//           </Card>\r\n//         ) : (\r\n//           <>\r\n//             <div style={{ float: \"right\" }}>\r\n//               {moment(post.createdAt).format(\"YYYY.MM.DD\")}\r\n//             </div>\r\n//             <Card.Meta\r\n//               avatar={\r\n//                 <Link href={`/user/${post.User.id}`} prefetch={false}>\r\n//                   <a>\r\n//                     <Avatar>{post.User.nickname[0]}</Avatar>\r\n//                   </a>\r\n//                 </Link>\r\n//               }\r\n//               title={post.User.nickname}\r\n//               description={\r\n//                 <PostCardContent\r\n//                   editMode={editMode}\r\n//                   onChangePost={onChangePost}\r\n//                   onCancelUpdate={onCancelUpdate}\r\n//                   postData={post.content}\r\n//                 />\r\n//               }\r\n//             />\r\n//           </>\r\n//         )}\r\n//       </Card>\r\n//       {commentFormOpened && (\r\n//         <div>\r\n//           <CommentForm post={post} />\r\n//           <List\r\n//             header={`${post.Comments.length}개의 댓글`}\r\n//             itemLayout=\"horizontal\"\r\n//             dataSource={post.Comments}\r\n//             renderItem={item => (\r\n//               <li>\r\n//                 <Comment\r\n//                   author={item.User.nickname}\r\n//                   avatar={\r\n//                     <Link href={`/user/${item.User.id}`} prefetch={false}>\r\n//                       <a>\r\n//                         <Avatar>{item.User.nickname[0]}</Avatar>\r\n//                       </a>\r\n//                     </Link>\r\n//                   }\r\n//                   content={item.content}\r\n//                 />\r\n//               </li>\r\n//             )}\r\n//           />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// PostCard.propTypes = {\r\n//   post: PropTypes.shape({\r\n//     id: PropTypes.number,\r\n//     User: PropTypes.object,\r\n//     content: PropTypes.string,\r\n//     createdAt: PropTypes.string,\r\n//     Comments: PropTypes.arrayOf(PropTypes.object),\r\n//     Images: PropTypes.arrayOf(PropTypes.object),\r\n//     Likers: PropTypes.arrayOf(PropTypes.object),\r\n//     RetweetId: PropTypes.number,\r\n//     Retweet: PropTypes.objectOf(PropTypes.any),\r\n//   }).isRequired,\r\n// };\r\n\r\n// export default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}