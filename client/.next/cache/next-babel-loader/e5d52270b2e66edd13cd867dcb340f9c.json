{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\arthu\\\\Documents\\\\nextpus_2020\\\\client\\\\components\\\\PostCardContent.js\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport PropTypes from \"prop-types\"; // #해시태그에 링크걸어서 포스팅 필터링하기\n// 정규표현식: / 내용물 /  regexr 참고\n//     ...:3글자, +:그다음글자모두선택, []:공백제거, 내부글자들 중에서선택 */}\n//     ^~: ^이후글자들 포함시 선택제외 \\s:공백 두번째#은 #앞에서 끊어주기 위해(ex. #첫째#둘째 이거분리) */}\n//     ()괄호로 감싸줘야 2번째, 3번째것도 별도로 포함이 됨\n\nvar PostCardContent = function PostCardContent(_ref) {\n  var postData = _ref.postData;\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 3\n    }\n  }, postData.split(/(#[^\\s#]+)/g).map(function (v) {\n    if (v.match(/(#[^\\s]+)/)) {\n      // 해쉬태그인 애들은 Link컴포넌트를 통한 리턴\n      // slice(1)은 #을 뗀것\n      return __jsx(Link, {\n        href: {\n          pathname: \"/hashtag\",\n          query: {\n            tag: v.slice(1)\n          }\n        },\n        as: \"/hashtag/\".concat(v.slice(1)),\n        key: v,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }\n      }, __jsx(\"a\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }\n      }, v));\n    } // 아닌애들은 그냥 리턴\n\n\n    return v;\n  }));\n};\n\n_c = PostCardContent;\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired\n};\nexport default PostCardContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCardContent\");","map":{"version":3,"sources":["C:/Users/arthu/Documents/nextpus_2020/client/components/PostCardContent.js"],"names":["React","Link","PropTypes","PostCardContent","postData","split","map","v","match","pathname","query","tag","slice","propTypes","string","isRequired"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGA,QAAQ,CAACC,KAAT,CAAe,aAAf,EAA8BC,GAA9B,CAAkC,UAAAC,CAAC,EAAI;AACtC,QAAIA,CAAC,CAACC,KAAF,CAAQ,WAAR,CAAJ,EAA0B;AACxB;AACA;AACA,aACE,MAAC,IAAD;AACE,QAAA,IAAI,EAAE;AAAEC,UAAAA,QAAQ,EAAE,UAAZ;AAAwBC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,GAAG,EAAEJ,CAAC,CAACK,KAAF,CAAQ,CAAR;AAAP;AAA/B,SADR;AAEE,QAAA,EAAE,qBAAcL,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAd,CAFJ;AAGE,QAAA,GAAG,EAAEL,CAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,CAAJ,CALF,CADF;AASD,KAbqC,CActC;;;AACA,WAAOA,CAAP;AACD,GAhBA,CAFH,CADsB;AAAA,CAAxB;;KAAMJ,e;AAuBNA,eAAe,CAACU,SAAhB,GAA4B;AAC1BT,EAAAA,QAAQ,EAAEF,SAAS,CAACY,MAAV,CAAiBC;AADD,CAA5B;AAIA,eAAeZ,eAAf","sourcesContent":["import React from \"react\";\r\nimport Link from \"next/link\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// #해시태그에 링크걸어서 포스팅 필터링하기\r\n// 정규표현식: / 내용물 /  regexr 참고\r\n//     ...:3글자, +:그다음글자모두선택, []:공백제거, 내부글자들 중에서선택 */}\r\n//     ^~: ^이후글자들 포함시 선택제외 \\s:공백 두번째#은 #앞에서 끊어주기 위해(ex. #첫째#둘째 이거분리) */}\r\n//     ()괄호로 감싸줘야 2번째, 3번째것도 별도로 포함이 됨\r\n\r\nconst PostCardContent = ({ postData }) => (\r\n  <div>\r\n    \r\n    {postData.split(/(#[^\\s#]+)/g).map(v => {\r\n      if (v.match(/(#[^\\s]+)/)) {\r\n        // 해쉬태그인 애들은 Link컴포넌트를 통한 리턴\r\n        // slice(1)은 #을 뗀것\r\n        return (\r\n          <Link\r\n            href={{ pathname: \"/hashtag\", query: { tag: v.slice(1) } }}\r\n            as={`/hashtag/${v.slice(1)}`}\r\n            key={v}\r\n          >\r\n            <a>{v}</a>\r\n          </Link>\r\n        );\r\n      }\r\n      // 아닌애들은 그냥 리턴\r\n      return v;\r\n    })}\r\n  </div>\r\n);\r\n\r\nPostCardContent.propTypes = {\r\n  postData: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PostCardContent;\r\n"]},"metadata":{},"sourceType":"module"}